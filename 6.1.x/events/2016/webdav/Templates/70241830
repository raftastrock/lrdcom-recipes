<style type="text/css">
    .blue-text {
        color: #153F6D;
    }

	#expert-exchange-section > div {
		display: table-cell;
	}
    .expert {
        cursor: pointer;
        display: inline-block;
        padding: 0 5px 7.5px;
        vertical-align: top;
    }


	.expert .image-container {
		background-color: #FFF;
		height: 139px;
 	   overflow: hidden;
	}
    .expert .image-container img {
        max-width: 139px;
        opacity: 0.3;
        transition: opacity 0.3s ease-in-out;
    }

    .expert .image-container:hover img, .expert .image-container.active img {
        opacity: 1;
    }

    .expert-exchange-description {
        display: inline-block;
        margin-right: 5px;
        vertical-align: top;
    }

    .expert-exchange-image-container {
        margin-top: 95px;
        width: 100%;
    }

    .expert-title {
        margin-bottom: 10px;
    }

    .expert-logo {
        display: inline-block;
        margin: 20px 10px;
        vertical-align: top;
        max-width: 150px;
    }

    .expert-info {
        display: inline-block;
        width: 65%;
    }

    .expert-info h3 {
        margin: 10px 0 0;
    }

    .expert-info-title {
        text-transform: uppercase;
    }

    .lighter-font {
        font-weight: 100;
    }

    .collapse {
        -o-transition-duration: 0.8s;
        -o-transition-property: max-height, visibility;
        -o-transition-timing-function: ease;
        -webkit-transition-duration: 0.8s;
        -webkit-transition-property: max-height, visibility;
        -webkit-transition-timing-function: ease;
        max-height: 0;
        overflow: hidden;
        position: relative;
        transition-duration: 0.8s;
        transition-property: max-height, visibility;
        transition-timing-function: ease;
        visibility: hidden;
    }

    .collapse.in {
        max-height: 999px;
        visibility: visible;
    }

    .info-display {
        border: 1px solid grey;
        margin: 0 5px 10px;
        max-width: 675px;
        width: 100%;
    }

    #experts .portlet-body {
        margin: 0 auto;
        max-width: 1040px;
    }
    
    ## hack if expert is repeated, move over text where image is missing 
    .expert-info-repeated{
    	margin-left: 170px; 
    }

    #main-content.full-screen-layout .portlet-column.aui-w30, #main-content.full-screen-layout .portlet-column.aui-w70 {
        display: inline-block;
    }

    .firefox #main-content.full-screen-layout .portlet-column.aui-w70 {
        width: 69%;
    }

    @media(max-width: 1000px) {
        .info-display {
            max-width: 505px;
        }

        .expert-info {
            display: block;
            margin: 0 10px;
            width: auto;
        }
        .expert-exchange-content {
        	padding: 0 10px;
        }
    }

    @media(max-width: 759px) {
        .info-display {
            max-width: 330px;
        }
    }

    @media (max-width: 720px) {
    
    	.expert-exchange-content {
        	padding: 0;
        }
		#expert-exchange-section > div {
			display:block;
			width: 100%;
		}
		
        .expert-exchange-description {
            margin-right: 0;
            padding: 10px;
        }

        .expert-exchange-image-container {
            margin-top: 10px;
            text-align: center;
        }

        .expert-logo {
            display: block;
            margin: 20px 0 20px 10px;
        }

        .expert-title {
            margin: 0 auto;
            padding: 5px;
        }

        .info-display {
            margin: 0 auto 20px;
            max-width: 505px;
            text-align: left;
        }
    }

    @media (max-width: 535px) {
        .info-display {
            max-width: 330px;
        }
    }
</style>

#set ($ddl_records_local_service = $serviceLocator.findService("com.liferay.portlet.dynamicdatalists.service.DDLRecordLocalService"))
#set ($record_set_id = $getterUtil.getLong($record_set_id.data))
#set ($records = $ddl_records_local_service.getRecords($record_set_id))

#set($experts = $portal.getClass().forName("java.util.TreeMap").newInstance())

#foreach ($record in $records)
    #set ($record = $record.record)
    #set ($record_uuid = $record.getUuid())
    #set ($title = $record.getFieldValue("expert_title"))
    #set ($subtitle = $record.getFieldValue("expert_subtitle"))
    #set ($description = $record.getFieldValue("expert_description"))
    #set ($image = $record.getFieldValue("expert_image"))
    #set ($logo = $record.getFieldValue("expert_logo"))
    #set ($group_id = $record.getGroupId())

    #set($expert = $portal.getClass().forName("java.util.TreeMap").newInstance())

    #set ($void = $expert.put("record", $record))
    #set ($void = $expert.put("title", $title))
    #set ($void = $expert.put("subtitle", $subtitle))
    #set ($void = $expert.put("description", $description))
    #set ($void = $expert.put("image", $image))
    #set ($void = $expert.put("logo", $logo))
    #set ($void = $expert.put("group_id", $group_id))

  

    #if ($record.getStatus() == "0")
    
		#if (!$experts.get("${subtitle}"))
      		#set ($void = $experts.put("${subtitle}", $portal.getClass().forName("java.util.TreeMap").newInstance()))
    	#end
    	#set ($void = $experts.get("${subtitle}").put("${title}-$velocityCount", $expert))
    #end
#end

<div id="expert-exchange-section" class="portlet-layout">
<div class="aui-w30 expert-exchange-content">
	$content.data
</div>
<div class="aui-w70 expert-exchange-image-container">
    #foreach($speaker in $experts)
		#foreach($item in $speaker)
	        #set ($record_uuid = $item.get("record_uuid"))
	        #set ($title = $item.get("title"))
	        #set ($subtitle = $item.get("subtitle"))
	        #set ($description = $item.get("description"))
	        #set ($group_id = $item.get("group_id"))
	
	        #set ($image = $item.get("image"))
	        #set ($image_json_object = $jsonFactoryUtil.createJSONObject($image))
	        #set ($image_uuid = $image_json_object.getString("uuid"))
	
	        #set ($logo = $item.get("logo"))
	        #set ($logo_json_object = $jsonFactoryUtil.createJSONObject($logo))
	        #set ($logo_uuid = $logo_json_object.getString("uuid"))

			#if ($velocityCount == 1)
	        <div class="expert">
	            <div class="image-container">
	                <img src="/documents/${group_id}/${image_uuid}?width=250" /></div>
	             <div class="aui-helper-hidden info-container">
	                 <img class="expert-logo lazy-load" datasrc="/documents/${group_id}/${logo_uuid}">
	        #end
	          
	             
	                <div class="expert-info #if ($velocityCount !=1) expert-info-repeated #end">
	                    <h3 class="blue-text lighter-font">$title</h3>
	                    #if ($velocityCount == 1)
	                    <p class="blue-text expert-info-title"   >$subtitle</p>
	                    #end
	                    <p>$description</p>
	                </div>
	     #end
	     	</div>
	     </div>
    #end
</div>
</div>
<script>
AUI().ready(
    'aui-base',
    function(A) {
        var addCollapse = function(displayNode, clickedNode) {
            var clickedNodeInfo = clickedNode.one('.info-container');
            var clickedNodeHTML = clickedNodeInfo.get('innerHTML');

            if (!displayNode.hasClass('collapse.in')) {
                displayNode.addClass('in');
            }

            clickedNode.one('.image-container').addClass('active');
            displayNode.set('innerHTML', clickedNodeHTML);
        };

        var removeCollapse = function() {
            var displayNode = A.one('.info-display.collapse.in');
            var activeContainer = A.one('.image-container.active');

            activeContainer.removeClass('active');
            displayNode.removeClass('in');
        };

        var assignRow = function(container, nodes) {
            var width = container.get('offsetWidth');
            var widthCount = 0;
            var count = 1;

            nodes.each(
                function(node) {
                    widthCount += node.get('offsetWidth');

                    if (widthCount >= width -10) {
                        widthCount = node.get('offsetWidth');
                        count++;
                    }

                    node.addClass('row-' + count);
                }
            );
        };

        var insertAfter = function(newNode, referenceNode) {
            referenceNode.get('parentNode').insertBefore(newNode, referenceNode.get('nextSibling'));
        };

        var removeRows = function(nodes) {
            var lastNode = nodes.item(nodes.size() - 1);
            if (lastNode != null) {
        	    var className = lastNode.get('className');
            	var numRows = className.substring(className.length - 1);

            	for (var i = 1; i <= numRows; i++) {
                	var nodesInRow = A.all('.row-' + i);

                	nodesInRow.each(
                   	 function(node) {
                   	     node.removeClass('row-' + i);
                   	 }
                	);
            	}
            }
        };

        var addDisplayBoxes = function(nodes) {
            var lastNode = nodes.item(nodes.size()-1);
            if (lastNode != null) {
	            var className = lastNode.get('className');
	            var numRows = className.substring(className.length - 1);
	
	            for(var i = 1; i <= numRows; i++) {
	                var nodesInRow = A.all('.row-' + i);
	                var display = A.Node.create('<div class="info-display collapse row-' + i + '"></div>');
	
	                lastNodeInList = nodesInRow.item(nodesInRow.size() - 1);
	                insertAfter(display, lastNodeInList);
	            }
	        }
        };

        var destroyDisplayBoxes = function() {
            var nodes = A.all('.info-display');

            nodes.each(
                function(node) {
                    node.remove(true);
                }
            );
        };

        var expertExchangeContainer = A.one('.expert-exchange-image-container');
        var experts = expertExchangeContainer.all('.expert');

        assignRow(expertExchangeContainer, experts);
        addDisplayBoxes(experts);

        expertExchangeContainer.delegate(
            'click',
            function(e) {
                var node = e.currentTarget;

                if (node.one('.image-container').hasClass('active')) {
                    removeCollapse();
                }
                else {
                    var nodeClassName = node.get('className');
                    var rowIndex = nodeClassName.indexOf('row-') + 4;
                    var rowNumber = nodeClassName.substring(rowIndex);

                    var displayingNode = A.one('.info-display.collapse.in');
                    var displayNode = A.one('.info-display.row-' + rowNumber);

                    if (displayingNode && displayingNode.hasClass('row-' + rowNumber)) {
                        A.one('.image-container.active').removeClass('active');
                    }
                    else if (displayingNode && !displayingNode.hasClass('row-' + rowNumber)) {
                        removeCollapse();
                    }

                    addCollapse(displayNode, node);
                }
            },
            '.expert'
        );

        expertExchangeContainer.on(
            'clickoutside',
            function() {
                if (A.one('.image-container.active')) {
                    removeCollapse();
                }

                expertExchangeContainer.detach('clickoutside');
            }
        );

        A.on(
            'windowresize',
            function() {
                var activeContainer = A.one('.image-container.active');

                if (activeContainer) {
                    activeContainer.removeClass('active');
                }

                removeRows(experts);
                assignRow(expertExchangeContainer, experts);
                destroyDisplayBoxes();
                addDisplayBoxes(experts);
            }
        );
    }
);
</script>